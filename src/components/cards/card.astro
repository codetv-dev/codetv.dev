---
import { Image } from '@unpic/astro';
import {
	createImageUrl,
	generateDefaultImage,
	getYouTubeThumbnail,
} from '../../util/cloudinary';

export interface Props {
	image: {
		public_id?: string | null;
		src?: string | null;
		alt: string | null;
	};
	tagline?: string | null;
	title: string | null;
	description?: string | null;
	link: string | null;
	linkText?: string;
	youtube_id?: string | null;
	width?: number | undefined;
}

const {
	image,
	tagline,
	link,
	linkText = 'More info',
	title,
	description,
	youtube_id,
	width = 675,
} = Astro.props;

// we use this in a few places, so put it in a variable
const ASPECT_RATIO = {
	w: 340,
	h: 190,
};

let cardImage;
if (image.src) {
	cardImage = image.src;
} else if (image.public_id) {
	cardImage = createImageUrl(image.public_id, {
		width,
		aspect_ratio: `${ASPECT_RATIO.w}:${ASPECT_RATIO.h}`,
		crop: 'fill',
	});
} else if (youtube_id) {
	cardImage = getYouTubeThumbnail(youtube_id);
} else {
	cardImage = generateDefaultImage({ text: title ?? '' });
}
---

<div class="card-container">
	<section class="card">
		<figure
			style={`--bg-img: url(${cardImage.replace(/\/w_\d+\//, '/w_30/')})`}
		>
			<a href={link} tabindex="-1">
				<Image
					src={cardImage}
					alt={image.alt}
					width={width}
					height={width * (ASPECT_RATIO.h / ASPECT_RATIO.w)}
					aspectRatio={ASPECT_RATIO.w / ASPECT_RATIO.h}
				/>
			</a>
		</figure>
		<div class="info">
			<div class="tagline">
				{tagline ? <p>{tagline}</p> : <slot name="tagline" />}
			</div>
			<h2><a href={link}>{title}</a></h2>
			<div class="details">
				<slot name="details" />
			</div>
			{description ? <p class="description">{description}</p> : null}
			<p>
				<a href={link} class="button" tabindex="-1">{linkText}</a>
			</p>
		</div>
	</section>
</div>

<style>
	.card-container {
		border-radius: 3px;
		container: card / inline-size;
		inline-size: 100%;
		max-inline-size: 1280px;
		outline: 1px solid transparent;
		outline-offset: 8px;
		transition: 150ms outline-color linear;

		&:has(:focus-within, :active, :hover) {
			outline: 1px solid var(--gray-600);
		}
	}

	.card {
		align-items: end;
		display: grid;
		gap: 20px;
		grid-template-columns: 100%;
		grid-template-rows: 1fr auto;
		inline-size: 100cqi;
		position: relative;

		figure {
			margin: 0;
			position: relative;
			z-index: 1;

			&::after {
				background: var(--bg-img);
				background-size: cover;
				content: '';
				filter: blur(40px);
				position: absolute;
				inset: 20px;
				z-index: 1;
			}
		}

		img {
			block-size: auto;
			border-radius: 3px;
			display: block;
			inline-size: 100%;
			position: relative;
			z-index: 10;
		}

		.info {
			container: info / inline-size;
			display: flex;
			flex-direction: column;
			font-size: 1rem;
			gap: 8px;
			line-height: 1.45;
			position: relative;
			z-index: 10;
		}

		.tagline {
			color: var(--text-muted);
			display: flex;
			font-family: 'supermassive', impact;
			font-size: clamp(0.75em, 4cqi, 1.125em);
			font-weight: normal;
			gap: 10px;
			line-height: 0.7;

			p:first-child {
				color: var(--text);
			}
		}

		h2 {
			color: var(--text-emphasized);
			font-family: var(--font-family);
			font-size: clamp(1em, 4.5cqi, 1.75em);
			font-weight: 600;
			line-height: 1.1;
			margin: 0;

			a {
				color: currentColor;
				text-decoration: none;
			}
		}

		.details {
			display: flex;
			font-size: clamp(0.75em, 5cqi, 1.125em);
			font-weight: 500;
			gap: 20px;
			line-height: 1.25;
			text-wrap: balance;

			p:first-child {
				color: var(--text-muted);
			}
		}

		.button {
			background: transparent;
			color: var(--white);
			display: inline-block;
			font-family: monaspace-argon;
			font-size: clamp(0.875em, 5cqi, 1.125em);
			font-weight: normal;
			line-height: 0.9;
			padding: 0;
			text-decoration: none;

			&:is(:active, :focus, :hover) {
				background: transparent;
				color: var(--orange);
				text-decoration: underline;
			}

			&::after {
				content: ' â†’';
			}
		}
	}

	@container card (min-width: 700px) {
		.card {
			grid-template-columns: 52cqi calc(48cqi - 20px);
			grid-template-rows: 100%;
		}
	}
</style>
