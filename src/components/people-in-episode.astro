---
import { CacheHeaders } from 'cdn-cache-control';
import { createImageUrl } from '../util/cloudinary';

export const prerender = false;

export interface Props {
	people: {
		user_id: string | null;
		name: string | null;
		slug: string | null;
		photo: { public_id: string | null } | null;
	}[];
}

const { people = [] } = Astro.props;

const userIds = people
	.map((p) => p.user_id)
	.filter((p) => typeof p === 'string');
const peopleWithUsername = people.map((person) => {
	return {
		...person,
		username: person.slug,
	};
});

const headers = new CacheHeaders()
	.swr()
	.ttl(86_400)
	.tag(['people', `people-${userIds.join('')}`]);

headers.forEach((value, key) => {
	Astro.response.headers.set(key, value);
});
---

{
	peopleWithUsername.length > 0 ? (
		<div class="people">
			<h2>People in this episode</h2>

			<div class="people-list">
				{peopleWithUsername.map((person) => {
					if (!person.photo || !person.photo.public_id) {
						return null;
					}

					const imgUrl = createImageUrl(person.photo.public_id, {
						width: 180,
						aspect_ratio: 1,
						crop: 'thumb',
						gravity: 'face',
					});

					return (
						<div class="person">
							<a href={`/profile/${person.username}`}>
								<img src={imgUrl} alt={person.name} />
							</a>
							<h4>{person.name}</h4>
						</div>
					);
				})}
			</div>
		</div>
	) : null
}

<style>
	.people {
		margin-block-start: 20px;
	}

	.people-list {
		display: grid;
		gap: 16px 4px;
		grid-template-columns: repeat(4, calc((100% - 12px) / 4));
		margin-block-end: 40px;
		margin-block-start: 8px;

		@media (min-width: 750px) {
			justify-content: start;
		}
	}

	.person {
		inline-size: 100%;

		> a:has(:hover, :active, :focus) {
			img {
				opacity: 1;
				outline: 1px solid var(--text-muted);
			}
		}

		img {
			block-size: auto;
			border-radius: 3px;
			display: block;
			inline-size: 100%;
			margin-inline: auto;
			opacity: 0.85;
			outline: 1px solid transparent;
			transition-duration: 150ms;
			transition-timing-function: linear;
			transition-property: outline-color, opacity;
		}

		& h4 {
			color: var(--text);
			font-size: 0.75em;
			font-weight: normal;
			line-height: 1.1;
			margin-block-start: 4px;
			text-align: center;

			& a {
				color: inherit;
				text-decoration: none;

				&:is(:hover, :focus) {
					text-decoration: underline;
				}
			}
		}
	}
</style>
