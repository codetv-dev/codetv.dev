---
import { UserProfile } from '@clerk/astro/components';
import Layout from '../../layouts/default.astro';
import DashboardSupporter from '../../components/dashboard/supporter.astro';
import LinksBio from '../../components/dashboard/links-bio.astro';
---

<Layout title="Your Dashboard â€” CodeTV">
	<main id="user-profile">
		<UserProfile>
			<UserProfile.Page label="Support" url="support">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 16 16"
					slot="label-icon"
				>
					<path
						fill="currentColor"
						fill-rule="evenodd"
						d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14ZM5.5 5.5c1.064-.183 1.95.251 2.351.521a.312.312 0 0 0 .344 0c.402-.27 1.287-.704 2.351-.521 1.262.217 1.963 2.2.954 3.5-.732.943-2.098 1.951-3 2.5a.91.91 0 0 1-1 0c-.902-.549-2.268-1.557-3-2.5-1.01-1.3-.262-3.283 1-3.5Z"
						clip-rule="evenodd"></path>
				</svg>
				<DashboardSupporter />
			</UserProfile.Page>

			<UserProfile.Page label="account" />

			<UserProfile.Page label="Links & Bio" url="links-bio">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 16 16"
					slot="label-icon"
				>
					<path
						fill="currentColor"
						fill-rule="evenodd"
						d="M12.95 13.2a7 7 0 1 0-9.9-9.9 7 7 0 0 0 9.9 9.9ZM6.409 7.367a.5.5 0 0 0-.707 0l-.026.025c-.337.337-.842.842-1.08 1.45a1.865 1.865 0 0 0-.097 1.1c.088.397.313.777.672 1.136.36.36.74.585 1.137.673.4.09.773.032 1.1-.096.608-.238 1.113-.744 1.45-1.08l.026-.027a.5.5 0 0 0-.707-.707c-.37.371-.74.728-1.132.882a.866.866 0 0 1-.518.053c-.172-.039-.39-.146-.648-.405-.259-.258-.365-.476-.404-.647a.867.867 0 0 1 .052-.519c.154-.392.512-.76.883-1.131a.5.5 0 0 0-.001-.707Zm2.237-.47a.5.5 0 1 1 .707.707l-2 2a.5.5 0 0 1-.707-.707l2-2Zm1.046-2.149c-.4-.089-.773-.031-1.1.097-.608.238-1.113.743-1.45 1.08l-.026.027a.5.5 0 0 0 .707.708c.371-.372.74-.73 1.133-.883.18-.07.349-.09.518-.053.172.038.39.146.648.404.258.259.366.476.404.648a.868.868 0 0 1-.053.518c-.154.393-.51.762-.882 1.133a.5.5 0 1 0 .707.707l.027-.026c.337-.337.842-.842 1.08-1.45.128-.327.186-.7.097-1.1-.09-.397-.313-.777-.673-1.137-.36-.36-.74-.584-1.137-.673Z"
						clip-rule="evenodd"></path>
				</svg>
				<LinksBio />
			</UserProfile.Page>

			<UserProfile.Page label="security" />
		</UserProfile>
	</main>
</Layout>

<script>
	function linksBioSetup() {
		// handle removing links
		function addRemoveHandlers() {
			const removeLinkBtns = document.querySelectorAll('.remove-link');
			removeLinkBtns.forEach((btn) => {
				function removeParent(event: Event) {
					event.preventDefault();
					event.stopImmediatePropagation();
					btn.parentElement?.remove();
				}

				btn.removeEventListener('click', removeParent);
				btn.addEventListener('click', removeParent);
			});
		}

		addRemoveHandlers();

		// handle adding additional links
		const linkTemplate = document.querySelector(
			'#link-template',
		) as HTMLTemplateElement;
		const linksContainer = document.querySelector('.links') as HTMLDivElement;
		const addLinkBtn = document.querySelector(
			'#add-profile-link',
		) as HTMLButtonElement;

		function addLink() {
			const link = linkTemplate.content.cloneNode(true);

			linksContainer.appendChild(link);
		}

		addLinkBtn.addEventListener('click', (event) => {
			event.preventDefault();

			addLink();
			addRemoveHandlers();
		});

		// disable form while waiting for update
		const updateProfile = document.querySelector('.update-profile-form');

		updateProfile?.addEventListener('submit', () => {
			updateProfile.classList.add('submitting');
			updateProfile.querySelector('button')?.setAttribute('disabled', 'true');
		});
	}

	function addObserver() {
		const targetNode = document.getElementById('user-profile');

		if (!targetNode) {
			return;
		}

		// Create an observer instance linked to the callback function
		const observer = new MutationObserver((mutationList) => {
			for (const mutation of mutationList) {
				mutation.addedNodes.forEach((node) => {
					if (node.nodeType !== node.ELEMENT_NODE) {
						return;
					}

					const el = node as HTMLElement;
					const btn = el.querySelector('#add-profile-link');
					if (!btn) {
						return;
					}

					linksBioSetup();
				});
			}
		});

		// Start observing the target node for configured mutations
		observer.observe(targetNode, {
			attributes: true,
			childList: true,
			subtree: true,
		});
	}

	addObserver();
</script>

<style>
	main {
		font-size: 0.75rem;
		margin: 0 auto 3rem;
		min-block-size: 90dvb;
		padding-block-start: 40px;

		@media (min-width: 1280px) {
			padding-block-start: 80px;
		}
	}

	.user-info {
		aspect-ratio: 1;
		inline-size: 250px;
		margin-block-end: 4rem;
		margin-inline: auto;

		img {
			block-size: auto;
			border: 1px solid var(--text-muted);
			border-radius: 3px;
			display: block;
			inline-size: 100%;
		}

		.view-profile {
			display: block;
			font-size: 0.625rem;
			font-weight: 400;
			margin-block-start: 0.5rem;
		}

		.name,
		p {
			font-size: 0.75rem;
			text-align: center;

			&.name {
				font-size: 1.25rem;
				font-weight: 500;
				letter-spacing: 0.02em;
				margin-block-start: 1rem;
			}

			&.level {
				background: color-mix(in oklch, var(--green-500) 15%, transparent);
				border: 0.5px solid var(--green-500);
				border-radius: 0.125rem;
				inline-size: max-content;
				margin-block-start: 10px;
				margin-inline: auto;
				padding-inline: 0.25rem;
			}

			&.start-date {
				color: var(--gray-600);
				font-size: 0.675rem;
				font-style: italic;
				margin-block-start: 0.5rem;
			}

			&.cancellation-pending {
				background: color-mix(in oklch, var(--orange-500) 25%, transparent);
				border: 1px solid var(--orange-500);
				border-radius: 0.125rem;
				color: var(--gray-600);
				font-size: 0.625rem;
				font-style: italic;
				margin-block-start: 0.5rem;
				padding: 0.25rem;
			}
		}

		.button {
			background: var(--bg);
			border: 1px solid color-mix(in oklch, var(--text-muted) 25%, transparent);
			color: var(--text-emphasized);
			font-family: var(--font-family);
			font-size: 0.75rem;
			inline-size: 100%;
			margin-block-start: 10px;
			text-align: center;
			transition: background 100ms linear;

			&:is(:hover, :active, :focus) {
				background: color-mix(in oklch, var(--text-muted) 15%, transparent);
			}
		}
	}

	.update-profile {
		background: var(--white);
		border: 1px solid var(--text-muted);
		border-radius: 0.125rem;
		color: var(--text-muted);
		cursor: pointer;
		display: block;
		font-size: 0.625rem;
		font-weight: 400;
		inline-size: 100%;
		margin-block-start: 1rem;
		margin-inline: auto;
		padding: 0.25rem 0.625rem;
		text-align: center;
		text-decoration: none;
		text-transform: lowercase;

		&:is(:hover, :focus, :active) {
			background: var(--gray-100);
		}
	}

	:global(.cl-rootBox) {
		margin-inline: auto;
	}

	.support {
		inline-size: min(90dvi, 660px + 1rem);
		margin: 4rem auto;
		text-align: center;

		h2 {
			font-size: 1.5rem;
		}

		p {
			font-size: 0.875rem;
			font-weight: 200;
			margin-block-start: 0.5rem;
			margin-inline: auto;
			max-inline-size: 54ch;
		}

		h3 {
			font-size: 1.25rem;
			margin-block-start: 2rem;
		}

		.sub-levels {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
			margin-block-start: 0.5rem;
		}

		.sub-level {
			background: var(--black);
			border: 1px solid color-mix(in oklch, var(--text-muted) 25%, transparent);
			border-radius: 3%;
			display: flex;
			flex-direction: column;
			gap: 10px;
			inline-size: 220px;
			padding: 10px;
			text-align: start;
			transition: 150ms background linear;

			&:has(button:hover, button:active, button:focus) {
				background: color-mix(in oklch, var(--text-muted) 15%, transparent);
			}

			h3 {
				font-size: 0.875rem;
				font-weight: 500;
				line-height: 1.1;
				margin-block: 0;
			}

			p {
				font-size: 0.75rem;
				margin-block: 0;
			}

			form {
				margin-block-start: auto;
			}

			button {
				background: var(--orange); /* color-mix(in oklch, var(--orange)); */
				/* border-color: color-mix(in oklch, var(--text-muted) 15%, transparent); */
				color: var(--black);
				font-size: 0.875rem;
				margin-block-start: 0;
				text-transform: uppercase;
				text-box-trim: trim-both;
				text-spacing-trim: space-all;
				transition: 150ms all linear;

				&:is(:hover, :active, :focus) {
					background: var(--white);
				}
			}
		}

		@media (min-width: 1280px) {
			inline-size: 100%;
			margin-block-start: 0;
			text-align: start;

			p {
				font-size: 1rem;
				margin-inline-start: 0;
				max-inline-size: 60ch;
			}
		}
	}

	.details {
		form {
			inline-size: min(90dvi, 400px);
			margin: 4rem auto;

			legend {
				font-size: 1rem;
				margin: 0 0 0.5rem;
				padding: 0;
			}

			:is(label, input:not([type='checkbox']), textarea, button) {
				display: block;
				inline-size: 100%;
			}

			:is(input:not([type='checkbox']), textarea, button) {
				background: var(--white);
				border: 1px solid var(--text-muted);
				border-radius: 0.125rem;
				font-size: 16px;
				font-weight: 400;
				padding: 0.25rem;
			}

			label {
				margin-block-end: 0.125rem;
			}

			textarea {
				block-size: calc(4 * 1.45rem);
				field-sizing: content;
			}

			:is(input, textarea) {
				color: var(--text);
				margin-block-end: 0.5rem;
			}

			.profile-links {
				margin-block-end: 1.5rem;

				h3 {
					color: var(--text);
					font-weight: 400;
					line-height: 1.1;
					margin-block: 2rem 0.25rem;
				}
			}

			.link {
				align-items: end;
				display: grid;
				grid-template-columns: 120px auto 2rem;
				gap: 0.5rem;
				margin-block-start: 1rem;
			}

			button.remove-link {
				align-items: center;
				border: none;
				border-radius: 50%;
				block-size: 1.875rem;
				display: flex;
				justify-content: center;
				margin-block-end: 0.625rem;

				&:is(:hover, :focus, :active) {
					background: var(--gray-100);
				}
			}

			button[type='submit'] {
				&:is(:hover, :focus, :active) {
					background: var(--yellow-500);
				}
			}
		}

		@media (min-width: 1280px) {
			grid-column-start: 2;

			form {
				inline-size: 100%;
			}
		}
	}

	#add-profile-link {
		border: none;
		color: var(--text-muted);
		text-align: start;
	}

	.update-profile-form {
		position: relative;

		&.submitting {
			opacity: 0.5;

			&::after {
				align-items: center;
				background: color-mix(in oklch, var(--gray-000) 80%, transparent);
				content: 'please wait';
				display: flex;
				flex-direction: row;
				inset: 0;
				justify-content: center;
				position: absolute;
			}
		}
	}
</style>

<style is:global>
	.panel-field {
		border-block-start: 1px solid rgb(255 255 255 / 0.07);
		margin-block-start: 24px;
		padding-block-start: 24px;

		@container (min-width: 500px) {
			align-items: first baseline;
			display: grid;
			grid-template-columns: 120px minmax(0, 1fr);
		}
	}

	.field {
		align-items: first baseline;
		display: grid;
		gap: 8px 20px;
		grid-template-columns: 80px minmax(0, 1fr);
		justify-content: space-between;
	}

	.field-label {
		display: block;
		text-align: end;
	}

	.field-value {
		color: var(--white);
	}
</style>
