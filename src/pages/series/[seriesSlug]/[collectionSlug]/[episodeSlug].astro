---
import { format } from 'date-fns';
import { marked } from 'marked';
import { Image } from '@unpic/astro';
import {
	getAllEpisodes,
	getEpisodeTranscriptBySlug,
} from '../../../../util/sanity';
import {
	createImageUrl,
	generateDefaultImage,
	getYouTubeThumbnail,
} from '../../../../util/cloudinary';
import Layout from '../../../../layouts/default.astro';
import VideoPlayer from '../../../../components/video-player.astro';
import ShareInput from '../../../../components/share-input.astro';
import BecomeASupporter from '../../../../components/supporter-button.astro';
import PeopleInEpisode from '../../../../components/people-in-episode.astro';
import Supporters from '../../../../components/supporters.astro';
import Card from '../../../../components/cards/card.astro';

export const prerender = true;

export async function getStaticPaths() {
	const allEpisodes = await getAllEpisodes();

	const paths = await Promise.all(
		allEpisodes.map(async (e) => {
			if (!e.series || !e.collection || !e.slug) {
				console.log(e);
				return false;
			}

			const episode = e;

			return {
				params: {
					seriesSlug: e.series.slug,
					collectionSlug: e.collection.slug,
					episodeSlug: e.slug,
				},
				props: { episode },
			};
		}),
	);

	return paths.filter(Boolean);
}

const { episode } = Astro.props;

const description = marked.parse(episode.description ?? '');

const episodeIndex =
	episode.related_episodes?.findIndex((e) => e.slug === episode.slug) ?? 0;

const episodeNumber = (
	episode.collection?.slug + `.E${episodeIndex + 1}`
).toUpperCase();

const relatedEpisodes = episode.related_episodes ?? [];

const url = Astro.site!;
url.pathname = `/series/${episode.series?.slug}/${episode.collection?.slug}/${episode.slug}`;

const thumb_w = 1600;
const thumb_h = 900;

let image;
if (episode.thumbnail.public_id) {
	image = createImageUrl(episode.thumbnail.public_id, {
		width: thumb_w,
		aspect_ratio: `${thumb_w}:${thumb_h}`,
		crop: 'fill',
	});
} else if (episode.video?.youtube_id) {
	image = getYouTubeThumbnail(episode.video.youtube_id);
} else {
	image = generateDefaultImage({ text: episode.title ?? '' });
}

const transcriptRaw = await getEpisodeTranscriptBySlug({
	episode: episode.slug!,
});
const transcript = marked.parse(transcriptRaw ?? '');

const title =
	episode.title +
	' | ' +
	episode.series?.title +
	' ' +
	episode.collection?.title;

let videoType;

if (episode.video && episode.video.youtube_id) {
	videoType = 'youtube';
}

if (episode.video && !episode.video.youtube_id && episode.video.mux) {
	videoType = 'mux';
}
---

<Layout title={title}>
	<Fragment slot="head">
		<link rel="canonical" href={url.toString()} />
		<meta name="description" content={episode.short_description} />
		<meta name="image" content={image} />

		<meta property="og:type" content="video.episode" />
		<meta property="og:title" content={title} />
		<meta property="og:site_name" content="CodeTV" />
		<meta property="og:description" content={episode.short_description} />
		<meta property="og:url" content={Astro.url} />

		<meta property="og:image" content={image} />
		<meta property="og:image:width" content={thumb_w.toString()} />
		<meta property="og:image:height" content={thumb_h.toString()} />
		<meta property="og:image:alt" content={episode.thumbnail?.alt ?? title} />

		<meta name="twitter:dnt" content="on" />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:description" content={episode.short_description} />
		<meta name="twitter:image" content={image} />
		<meta name="twitter:creator" content="@codetv_dev" />

		<script
			type="application/ld+json"
			set:html={`
			{
				"@context": "https://schema.org",
				"@type": "TVEpisode",
				"url": "${Astro.url}",
				"name": "${title}",
				"image": "${image}",
				"description": "${episode.short_description}",
				"datePublished": "${format(new Date(episode.publish_date!), 'yyyy-MM-dd')}",
				"actor": [
					${episode.people?.map((person) => {
						return JSON.stringify(
							{
								'@type': 'Person',
								url: `https://codetv.dev/profile/${person.slug}`,
								name: person.name,
							},
							null,
							2,
						);
					})}
				],
				"creator": [
					{
						"@type": "Organization",
						"url": "https://codetv.dev"
					},
					{
						"@type": "Person",
						"url": "https://codetv.dev/profile/jlengstorf",
						"name": "Jason Lengstorf"
					}
				]
			}
		`}
		/>
	</Fragment>

	<main>
		<div
			class="video-wrapper"
			style={`--bg-img: url(${image.replace(/,w_\d+\//, '/w_30/')})`}
		>
			{
				episode.video?.youtube_id || episode.video?.mux ? (
					<VideoPlayer
						video={{
							youtube_id: episode.video.youtube_id,
							mux: episode.video.mux?.map((v) => ({
								id: v.id ?? '',
								policy: v.policy as 'public' | 'signed',
							})),
							captions: episode.video.captions,
							title: title,
							publish_date: episode.publish_date,
							thumbnail: episode.thumbnail,
						}}
						server:defer
					>
						<div class="video-player-placeholder" slot="fallback" />
					</VideoPlayer>
				) : image ? (
					<div class="thumbnail">
						<Image src={image} alt={episode.thumbnail.alt ?? title} />
					</div>
				) : null
			}
		</div>

		<div class="wrapper">
			<section class="header">
				<div class="episode-details">
					<h1>
						{episode.title}
					</h1>
					<div class="episode-meta">
						<a
							href={`/series/${episode.series?.slug}/${episode.collection?.slug}`}
							class="season-link">{episode.series?.title}</a
						>
						<span class="episode-number">
							{episodeNumber}
						</span>
						<span class="episode-date">
							{
								new Date(episode.publish_date!) > new Date()
									? `Coming ${format(new Date(episode.publish_date!), 'eeee, MMM d')}`
									: format(new Date(episode.publish_date!), 'MMM d, yyyy')
							}
						</span>
					</div>
				</div>

				<nav class="episode-links">
					<ShareInput
						label="Share this episode"
						title={title}
						text={episode.short_description!}
						url={url.toString()}
					/>

					<BecomeASupporter server:defer />

					{
						videoType === 'mux' ? (
							<a href="https://codetv.link/mux">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="148"
									height="24"
									fill="none"
								>
									<g clip-path="url(#a)">
										<path
											fill="#565E67"
											d="M78.98 16.867v-3.614l-2.907-6.12h1.374l1.826 3.84q.16.346.254.627.105.267.133.4.04-.133.133-.4.107-.28.28-.627l1.787-3.84h1.36l-2.907 6.12v3.614zm-10.142 0V7.133h2.814q.907 0 1.546.307.654.293 1 .867.36.56.36 1.346 0 1-.626 1.587-.614.586-1.667.573v-.186q1.133-.015 1.827.68.693.68.693 1.84 0 .825-.36 1.44-.36.613-1.027.946-.652.334-1.56.334zm1.294-1.16h1.586q.815 0 1.28-.427.467-.44.467-1.187 0-.773-.467-1.253-.465-.48-1.28-.48h-1.586zm0-4.467h1.506q.748 0 1.174-.387.426-.399.426-1.08 0-.693-.426-1.08-.413-.4-1.16-.4h-1.52zm-13.897 5.627V7.133h2.614q.96 0 1.653.374.693.36 1.08 1.026.387.653.387 1.547v3.827q0 .893-.387 1.56a2.7 2.7 0 0 1-1.08 1.04q-.693.36-1.653.36zm1.32-1.174h1.294q.84 0 1.32-.48t.48-1.306V10.08q0-.826-.48-1.293-.48-.48-1.32-.48h-1.294zm-9.195 1.174V7.133h5.667V8.32h-4.36v2.893h3.894v1.16h-3.894v3.307h4.36v1.187zm-8.114 0V7.133h3.026q.894 0 1.56.36.68.346 1.04.987.375.627.374 1.48 0 .973-.507 1.693-.507.707-1.373.987l2.013 4.227h-1.533L43.032 12.8h-1.466v4.067zm1.32-5.24h1.706q.734 0 1.174-.454.44-.453.44-1.2 0-.759-.44-1.213-.44-.453-1.174-.453h-1.706zm-9.195 5.24V7.133h5.667V8.32h-4.36v2.893h3.893v1.16h-3.893v3.307h4.36v1.187zm-8.035 0-1.08-9.734h1.214l.706 7.094q.014.279.04.6t.04.613q.027.294.027.493a6 6 0 0 0 .04-.493q.027-.293.067-.613.039-.321.066-.6l.88-7.094h1.28l.814 7.094q.039.279.066.6.041.32.067.613.04.294.053.493a24 24 0 0 0 .027-.493q.027-.293.053-.613.04-.321.054-.6l.72-7.094h1.173l-1.12 9.734h-1.587l-.8-7.2q-.027-.294-.066-.6l-.054-.574a20 20 0 0 1-.04-.466q-.013.187-.053.466-.027.267-.053.574-.027.306-.067.6l-.867 7.2zM18.821 17q-.892 0-1.546-.333a2.4 2.4 0 0 1-.987-.974q-.347-.64-.347-1.52V9.827q0-.881.347-1.507.347-.64.987-.973Q17.927 7 18.82 7t1.534.347a2.3 2.3 0 0 1 1 .973q.345.627.346 1.493v4.36q0 .88-.346 1.52a2.4 2.4 0 0 1-1 .974q-.64.333-1.534.333m0-1.173q.76 0 1.16-.427.4-.426.4-1.227V9.827q0-.801-.4-1.227t-1.16-.427q-.747 0-1.16.427-.4.426-.4 1.227v4.346q0 .801.4 1.227.413.427 1.16.427M8 16.867V7.133h3.16q.933 0 1.613.36t1.054 1.014q.373.639.373 1.533 0 .867-.373 1.52-.374.653-1.054 1.013-.679.36-1.613.36H9.32v3.934zm1.32-5.107h1.84q.76 0 1.213-.467.467-.48.467-1.253 0-.8-.467-1.267-.453-.466-1.213-.466H9.32z"
										/>
										<path stroke="#565E67" d="M.5.5h147v23H.5z" />
										<path
											fill="#565E67"
											fill-rule="evenodd"
											d="M148 0H90v24h58zm-19.678 16.013 4.07-4.013-4.07-4.013a1.73 1.73 0 0 1 0-2.475 1.79 1.79 0 0 1 2.509 0l4.07 4.014 4.07-4.014a1.79 1.79 0 0 1 2.509 0 1.73 1.73 0 0 1 0 2.475L137.411 12l4.069 4.013a1.73 1.73 0 0 1 0 2.474 1.79 1.79 0 0 1-2.509 0l-4.07-4.013-4.07 4.014a1.79 1.79 0 0 1-2.509 0 1.73 1.73 0 0 1 0-2.475m-5.579-9.263c0-.967.794-1.75 1.774-1.75s1.775.783 1.775 1.75V12c0 3.86-3.185 7-7.099 7s-7.099-3.14-7.099-7V6.75c0-.967.794-1.75 1.774-1.75s1.774.783 1.774 1.75V12c0 1.93 1.593 3.5 3.55 3.5 1.958 0 3.551-1.57 3.551-3.5zm-13.641-1.617a1.79 1.79 0 0 0-1.933.38l-4.07 4.013-4.07-4.013c-.507-.5-1.27-.65-1.934-.38A1.75 1.75 0 0 0 96 6.75v10.5c0 .967.794 1.75 1.774 1.75s1.775-.783 1.775-1.75v-6.276l2.295 2.263a1.793 1.793 0 0 0 2.51 0l2.295-2.263v6.276c0 .967.795 1.75 1.774 1.75.98 0 1.775-.783 1.775-1.75V6.75a1.75 1.75 0 0 0-1.095-1.617z"
											clip-rule="evenodd"
										/>
									</g>
									<defs>
										<clipPath id="a">
											<path fill="#fff" d="M0 0h148v24H0z" />
										</clipPath>
									</defs>
								</svg>
							</a>
						) : null
					}
				</nav>
			</section>

			<section class="description">
				<div set:html={description} />

				{
					episode.resources && episode.resources.length > 0 ? (
						<div class="resources">
							<h2>Resources & Links</h2>

							<ul class="resources">
								{episode.resources.map((resource) => {
									if (!resource.url) {
										return null;
									}

									const label = resource.label ?? resource.url;

									return (
										<li class="resource">
											<a href={resource.url}>
												{label.replace(/^https:\/\/(www\.)?/, '')}
											</a>
										</li>
									);
								})}
							</ul>
						</div>
					) : null
				}

				{
					transcript ? (
						<div class="transcript">
							<details>
								<summary>Read the transcript</summary>

								<div set:html={transcript} />
							</details>
						</div>
					) : null
				}
			</section>

			<section class="additional-details">
				{
					episode.sponsors && episode.sponsors.length > 0 ? (
						<div class="sponsors">
							<h3>Presented by</h3>

							<div class="sponsor-logos">
								{episode.sponsors.map((sponsor) => {
									if (
										!sponsor.logo ||
										!sponsor.logo.public_id ||
										!sponsor.logo.width ||
										!sponsor.logo.height
									) {
										return;
									}

									const src = createImageUrl(sponsor.logo.public_id, {
										height: sponsor.logo.height * 2,
										width: sponsor.logo.width * 2,
									});

									return (
										<a
											href={sponsor.link}
											style={`--ar: ${sponsor.logo.width / sponsor.logo.height}`}
										>
											<img
												src={src}
												alt={sponsor.title}
												height={sponsor.logo.height * 2}
												width={sponsor.logo.width * 2}
											/>
										</a>
									);
								})}
							</div>
						</div>
					) : null
				}

				<PeopleInEpisode people={episode.people ?? []} server:defer />

				<div class="supporters">
					<h2>Supporters</h2>
					<p>
						<a href="/support">
							Become a supporter to see yourself here on future episodes!
						</a>
					</p>
					<Supporters />
				</div>
			</section>

			{
				relatedEpisodes.length > 0 &&
				relatedEpisodes.length !== 1 &&
				relatedEpisodes.at(0)?.slug !== episode.slug ? (
					<section class="related-episodes">
						<h2>
							More episodes from {episode.series?.title}{' '}
							{episode.collection?.title}
						</h2>

						<div class="row three-up">
							{relatedEpisodes.map((related, index) => {
								const minIndex = Math.max(0, episodeIndex - 3);
								const maxIndex = Math.min(relatedEpisodes.length, minIndex + 6);
								if (
									related.slug === episode.slug ||
									index < minIndex ||
									index > maxIndex
								) {
									return null;
								}

								return (
									<Card
										image={{
											public_id: related.thumbnail?.public_id,
											alt: related.thumbnail?.alt ?? '',
										}}
										title={related.title}
										description={related.short_description}
										link={`/series/${episode.series?.slug}/${episode.collection?.slug}/${related.slug}`}
										linkText="Watch episode"
										youtube_id={related.video?.youtube_id}
									>
										<Fragment slot="tagline">
											<p class="series">{episode.series?.title}</p>
											<p class="episode-number">
												{`${episode.collection?.slug}.E${index + 1}`.toUpperCase()}
											</p>
										</Fragment>
									</Card>
								);
							})}
						</div>
					</section>
				) : null
			}
		</div>
	</main>
</Layout>

<style>
	.video-wrapper {
		aspect-ratio: 16 / 9;
		background: var(--black);
		border-bottom: 1px solid var(--gray-600);
		container: video-wrapper / size;
		inline-size: 100%;
		margin: 0;
		max-block-size: calc(100dvh - 280px);
		position: relative;
		z-index: 1;

		@media (min-width: 1080px) {
			margin-block-start: 120px;
		}

		&::after {
			background: var(--bg-img);
			background-size: cover;
			content: '';
			filter: blur(40px);
			inset: 20px;
			opacity: 0.4;
			position: absolute;
			z-index: 1;
		}

		> * {
			position: relative;
			z-index: 10;
		}

		&:has(.subscription-required) {
			aspect-ratio: unset;
			container: video-wrapper / inline-size;

			@media (min-width: 500px) {
				aspect-ratio: 16 / 9;
				container: video-wrapper / size;
			}
		}
	}

	.wrapper {
		margin-inline: auto;
		max-inline-size: 1440px;
		padding: 20px 5cqw 80px;

		@media (min-width: 750px) {
			display: grid;
			gap: 30px;
			grid-template-columns: calc(62% - 15px) minmax(0, 1fr);
		}
	}

	.video-player-placeholder {
		animation: 1s pulse infinite alternate linear;
		aspect-ratio: 16 / 9;
		background: var(--gray-900);
		block-size: auto;
		inline-size: 100dvi;
	}

	.thumbnail {
		img {
			aspect-ratio: 16 / 7;
			display: block;
			object-fit: cover;
		}
	}

	.header {
		@media (min-width: 750px) {
			display: flex;
			grid-column: 1 / 3;
			justify-content: space-between;
		}
	}

	.episode-details {
		h1 {
			font-weight: 500;
			line-height: 1.1;
			margin-block: 4px 8px;
		}

		p {
			line-height: 1.25;
		}
	}

	.episode-links {
		align-items: center;
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
		justify-content: center;
		margin-block-start: 1rem;

		@media (min-width: 1000px) {
			margin-block-start: 0;
		}

		label {
			color: var(--text-muted);

			input {
				display: block;
				font: inherit;
				inline-size: 300px;
			}
		}

		.button {
			background: var(--yellow-500);
			border: 1px solid var(--text-muted);
			block-size: min-content;
			color: var(--black);
			font-weight: 600;
			margin: 0;
			text-decoration: none;
		}

		.inline-heart {
			margin-inline-end: 0.5rem;
		}

		svg:not(.inline-heart) {
			display: block;
		}
	}

	.episode-meta {
		display: flex;
		flex-direction: column;
		font-size: 0.875rem;
		font-weight: 200;
		margin-block: 0.25rem;

		@media (min-width: 410px) {
			flex-direction: initial;
			gap: 0.5rem;
		}
	}

	.season-link {
		color: var(--text-strong);
		font-weight: 600;
		text-decoration: none;

		&:is(:focus, :hover, :active) {
			text-decoration: underline;
		}
	}

	.episode-number {
		font-weight: 600;
		text-transform: uppercase;
	}

	.additional-details,
	.description,
	.supporters {
		h2 {
			font-size: 1.125rem;
			font-weight: 600;
			line-height: 1.1;
			margin-block: 0.25rem;
		}

		ul:not(.resources) {
			margin-block: 0.5rem 0;
			padding-inline-start: 20px;
		}

		li {
			margin-block-start: 0.25rem;
		}

		p {
			&:not(:first-child) {
				margin-block-start: 0.75rem;
			}
		}
	}

	.description {
		margin-block: 3rem;
		max-inline-size: 54ch;

		@media (min-width: 1000px) {
			margin-block-start: 0;
		}

		h2 {
			margin-block: 1.5rem 0.5rem;
		}
	}

	.resources {
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
		list-style: none;
		padding: 0;
	}

	.resource {
		display: block;
		max-inline-size: 90dvi;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	.transcript {
		margin-block-start: 30px;

		summary {
			font-weight: 600;
			margin-block-end: 15px;
		}
	}

	.sponsors {
		align-items: center;
		display: flex;
		flex-direction: column;
		gap: 8px;
		justify-content: center;
		margin: 0 0 40px;

		@media (min-width: 750px) {
			flex-direction: initial;
			gap: 40px;
		}

		h3 {
			color: var(--text-muted);
			font-size: 0.75rem;
			font-weight: 500;
			margin: 0;
			text-transform: uppercase;
			text-wrap: nowrap;
		}
	}

	.sponsor-logos {
		align-items: center;
		display: flex;
		flex-wrap: wrap;
		gap: 0 32px;
		justify-content: center;

		@media (min-width: 750px) {
			justify-content: start;
		}

		a {
			aspect-ratio: var(--ar);
			display: block;
		}

		img {
			aspect-ratio: var(--ar);
			block-size: 40px;
			display: block;
			inline-size: auto;
			margin: 0;
			object-fit: contain;
		}
	}

	.related-episodes {
		@media (min-width: 1000px) {
			grid-column: 1 / 3;
			margin-block-end: 3rem;
		}

		h2 {
			font-size: 1.125rem;
			font-weight: 600;
			margin-block-end: 0.75rem;
		}
	}
</style>
