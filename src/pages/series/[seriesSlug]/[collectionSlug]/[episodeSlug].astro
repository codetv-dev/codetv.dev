---
import { format } from 'date-fns';
import { marked } from 'marked';
import { Image } from '@unpic/astro';
import { getAllEpisodes } from '../../../../util/sanity';
import {
	createImageUrl,
	generateEpisodePoster,
	getYouTubeThumbnail,
} from '../../../../util/cloudinary';
import Layout from '../../../../layouts/default.astro';
import VideoPlayer from '../../../../components/video-player.astro';
import EpisodePreview from '../../../../components/episode-preview.astro';
import ShareInput from '../../../../components/share-input.astro';
import BecomeASupporter from '../../../../components/supporter-button.astro';
import PeopleInEpisode from '../../../../components/people-in-episode.astro';
import Supporters from '../../../../components/supporters.astro';

export const prerender = true;

export async function getStaticPaths() {
	const allEpisodes = await getAllEpisodes();

	const paths = await Promise.all(
		allEpisodes.map(async (e) => {
			if (!e.series || !e.collection || !e.slug) {
				console.log(e);
				return false;
			}

			const episode = e;

			return {
				params: {
					seriesSlug: e.series.slug,
					collectionSlug: e.collection.slug,
					episodeSlug: e.slug,
				},
				props: { episode },
			};
		}),
	);

	return paths.filter(Boolean);
}

const { episode } = Astro.props;

const description = marked.parse(episode.description ?? '');

const episodeIndex =
	episode.related_episodes?.findIndex((e) => e.slug === episode.slug) ?? 0;

const episodeNumber = (
	episode.collection?.slug + `E${episodeIndex + 1}`
).toUpperCase();

const relatedEpisodes = episode.related_episodes ?? [];

const url = Astro.site!;
url.pathname = `/series/${episode.series?.slug}/${episode.collection?.slug}/${episode.slug}`;

const thumb_w = 1280;
const thumb_h = 720;

let image;
if (episode.thumbnail.public_id) {
	image = createImageUrl(episode.thumbnail.public_id, {
		width: thumb_w,
		aspect_ratio: `${thumb_w}:${thumb_h}`,
		crop: 'fill',
	});
} else if (episode.video?.youtube_id) {
	image = getYouTubeThumbnail(episode.video.youtube_id);
} else {
	image = generateEpisodePoster();
}
---

<Layout title={episode.title as string}>
	<Fragment slot="head">
		<link rel="canonical" href={url.toString()} />
		<meta name="description" content={episode.short_description} />
		<meta name="image" content={image} />

		<meta property="og:type" content="video.episode" />
		<meta property="og:title" content={episode.title} />
		<meta property="og:site_name" content="CodeTV" />
		<meta property="og:description" content={episode.short_description} />
		<meta property="og:url" content={Astro.url} />

		<meta property="og:image" content={image} />
		<meta property="og:image:width" content={thumb_w.toString()} />
		<meta property="og:image:height" content={thumb_h.toString()} />
		<meta
			property="og:image:alt"
			content={episode.thumbnail?.alt ?? episode.title}
		/>

		<meta name="twitter:dnt" content="on" />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:description" content={episode.short_description} />
		<meta name="twitter:image" content={image} />
		<meta name="twitter:creator" content="@codetv_dev" />

		<script
			type="application/ld+json"
			set:html={`
			{
				"@context": "https://schema.org",
				"@type": "TVEpisode",
				"url": "${Astro.url}",
				"name": "${episode.title}",
				"image": "${image}",
				"description": "${episode.short_description}",
				"datePublished": "${format(episode.publish_date!, 'yyyy-MM-dd')}",
				"actor": [
					${episode.people?.map((person) => {
						return JSON.stringify(
							{
								'@type': 'Person',
								url: `https://codetv.dev/profile/${person.slug}`,
								name: person.name,
							},
							null,
							2,
						);
					})}
				],
				"creator": [
					{
						"@type": "Organization",
						"url": "https://codetv.dev"
					},
					{
						"@type": "Person",
						"url": "https://codetv.dev/profile/jlengstorf",
						"name": "Jason Lengstorf"
					}
				]
			}
		`}
		/>

		<!-- <meta
			property="og:video"
			content="https://stream.mux.com/5Mt02twIFdC5m00oZAMVi83aUz8urnKBXT5RcMUd0247XE/capped-1080p.mp4"
		/>
		<meta property="og:video:width" content="1920" />
		<meta property="og:video:height" content="1080" /> -->
	</Fragment>

	<main>
		<div class="video-wrapper">
			{
				episode.video?.youtube_id || episode.video?.mux ? (
					<VideoPlayer
						video={{
							...episode.video,
							thumbnail: episode.thumbnail,
							title: episode.title,
							publish_date: episode.publish_date,
						}}
						server:defer
					>
						<div class="video-player-placeholder" slot="fallback" />
					</VideoPlayer>
				) : image ? (
					<div class="thumbnail">
						<Image src={image} alt={episode.thumbnail.alt ?? episode.title} />
					</div>
				) : null
			}
		</div>

		<div class="wrapper">
			<section class="header">
				<div class="episode-details">
					<h1>
						{episode.title}
					</h1>
					<div class="episode-meta">
						<a
							href={`/series/${episode.series?.slug}/${episode.collection?.slug}`}
							class="season-link">{episode.series?.title}</a
						>
						<span class="episode-number">
							{episodeNumber}
						</span>
						<span class="episode-date">
							{
								new Date(episode.publish_date!) > new Date()
									? `Coming ${format(episode.publish_date!, 'eeee, MMM d')}`
									: format(episode.publish_date!, 'MMM d, yyyy')
							}
						</span>
					</div>
				</div>

				<nav class="episode-links">
					<ShareInput label="Share this episode:" url={url.toString()} />

					<BecomeASupporter server:defer />
				</nav>
			</section>

			<section class="description">
				<div set:html={description} />

				{
					episode.resources && episode.resources.length > 0 ? (
						<div class="resources">
							<h2>Resources & Links</h2>

							<ul class="resources">
								{episode.resources.map((resource) => {
									if (!resource.url) {
										return null;
									}

									const label = resource.label ?? resource.url;

									return (
										<li class="resource">
											<a href={resource.url}>
												{label.replace(/^https:\/\/(www\.)?/, '')}
											</a>
										</li>
									);
								})}
							</ul>
						</div>
					) : null
				}
			</section>

			<section class="additional-details">
				{
					episode.sponsors && episode.sponsors.length > 0 ? (
						<div class="sponsors">
							<h3>Presented by</h3>

							<div class="sponsor-logos">
								{episode.sponsors.map((sponsor) => {
									if (
										!sponsor.logo ||
										!sponsor.logo.public_id ||
										!sponsor.logo.width ||
										!sponsor.logo.height
									) {
										return;
									}

									const src = createImageUrl(sponsor.logo.public_id, {
										height: sponsor.logo.height * 2,
										width: sponsor.logo.width * 2,
										color: '#463963',
										effect: 'colorize',
									});

									return (
										<a href={sponsor.link}>
											<Image
												src={src}
												alt={sponsor.title}
												height={70}
												aspectRatio={sponsor.logo.width / sponsor.logo.height}
											/>
										</a>
									);
								})}
							</div>
						</div>
					) : null
				}

				<PeopleInEpisode people={episode.people ?? []} server:defer />
			</section>

			{
				relatedEpisodes.length > 0 ? (
					<section class="related-episodes">
						<h2>
							More episodes from {episode.series?.title}{' '}
							{episode.collection?.title}
						</h2>

						<div class="more-episodes">
							{relatedEpisodes.map((related, index) => {
								const minIndex = Math.max(0, episodeIndex - 3);
								const maxIndex = Math.min(relatedEpisodes.length, minIndex + 6);
								if (
									related.slug === episode.slug ||
									index < minIndex ||
									index > maxIndex
								) {
									return null;
								}

								return (
									<EpisodePreview
										class="compact"
										episode={related}
										episodeNumber={`${episode.collection?.slug}E${index + 1}`.toUpperCase()}
										episodeUrl={`/series/${episode.series?.slug}/${episode.collection?.slug}/${related.slug}`}
									/>
								);
							})}
						</div>
					</section>
				) : null
			}

			<section class="supporters">
				<h2>Supporters</h2>
				<p>
					<a href="/support">
						Become a supporter to see yourself here on future episodes!
					</a>
				</p>
				<Supporters />
			</section>
		</div>
	</main>

	<style>
		.video-wrapper {
			aspect-ratio: 16 / 9;
			background: var(--gray-900);
			border-bottom: 1px solid var(--gray-600);
			container: video-wrapper / size;
			inline-size: 100dvi;
			max-block-size: calc(100dvh - 280px);
			min-block-size: 480px;
			overflow: hidden;
		}

		.wrapper {
			margin-inline: auto;
			max-inline-size: 1440px;
			padding: 20px 5cqw 80px;

			@media (min-width: 750px) {
				display: grid;
				gap: 30px;
				grid-template-columns: calc(62% - 15px) auto;
			}
		}

		.video-player-placeholder {
			animation: 1s pulse infinite alternate linear;
			aspect-ratio: 16 / 9;
			background: var(--gray-900);
			block-size: auto;
			inline-size: 100dvi;
		}

		.thumbnail {
			img {
				aspect-ratio: 16 / 7;
				display: block;
				object-fit: cover;
			}
		}

		.header {
			@media (min-width: 750px) {
				display: flex;
				grid-column: 1 / 3;
				justify-content: space-between;
			}
		}

		.episode-details {
			& h1 {
				font-weight: 500;
				line-height: 1.1;
				margin-block: 0.25rem 0.5rem;
			}

			& p {
				line-height: 1.25;
			}
		}

		.episode-links {
			align-items: center;
			display: flex;
			flex-wrap: wrap;
			gap: 1rem;
			justify-content: center;
			margin-block-start: 1rem;

			@media (min-width: 1000px) {
				margin-block-start: 0;
			}

			label {
				color: var(--text-muted);

				input {
					display: block;
					font: inherit;
					inline-size: 300px;
				}
			}

			.button {
				background: var(--yellow-500);
				border: 1px solid var(--gray-300);
				block-size: min-content;
				color: var(--black);
				font: inherit;
				font-weight: 600;
				margin: 0;
				text-decoration: none;
			}

			.inline-heart {
				margin-inline-end: 0.5rem;
			}
		}

		.episode-meta {
			display: flex;
			font-size: 0.875rem;
			font-weight: 200;
			gap: 0.5rem;
			margin-block: 0.25rem;
		}

		.season-link {
			color: var(--text-strong);
			font-weight: 600;
			text-decoration: none;

			&:is(:focus, :hover, :active) {
				text-decoration: underline;
			}
		}

		.episode-number {
			font-weight: 600;
			text-transform: uppercase;
		}

		section,
		.description {
			h2 {
				font-size: 1.125rem;
				font-weight: 600;
				line-height: 1.1;
				margin-block: 0.25rem;
			}

			ul:not(.resources) {
				margin-block: 0.5rem 0;
				padding-inline-start: 20px;
			}

			li {
				margin-block-start: 0.25rem;
			}

			p {
				&:not(:first-child) {
					margin-block-start: 0.75rem;
				}
			}
		}

		.description {
			margin-block: 3rem;
			max-inline-size: 54ch;

			@media (min-width: 1000px) {
				margin-block-start: 0;
			}

			h2 {
				margin-block: 1.5rem 0.5rem;
			}
		}

		.resources {
			display: flex;
			flex-direction: column;
			gap: 0.25rem;
			list-style: none;
			padding: 0;
		}

		.resource {
			display: block;
			max-inline-size: 90dvi;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
		}

		.sponsors {
			align-items: center;
			display: flex;
			gap: 1.5rem;
			justify-content: start;
			margin: 0;

			h3 {
				color: var(--text-muted);
				font-size: 0.75rem;
				font-weight: 500;
				margin: 0;
				text-transform: uppercase;
			}
		}

		.sponsor-logos {
			align-items: center;
			display: flex;
			gap: 2rem;

			img {
				block-size: 2.5rem;
				inline-size: auto;
			}
		}

		.related-episodes,
		.supporters {
			@media (min-width: 1000px) {
				grid-column: 1 / 3;
				margin-block-end: 3rem;
			}
		}

		.related-episodes {
			h2 {
				font-size: 1.125rem;
				font-weight: 600;
				margin-block-end: 0.75rem;
			}
		}

		.more-episodes {
			container: more-episodes / inline-size;
			display: flex;
			flex-wrap: wrap;
			gap: 2rem;
			justify-content: center;
			margin-block-start: 0.25rem;

			@media (min-width: 1000px) {
				justify-content: start;

				.episode {
					inline-size: calc((100cqi - 6rem) / 4);
				}
			}
		}
	</style>
</Layout>
