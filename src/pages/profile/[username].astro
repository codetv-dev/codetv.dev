---
import { getCollection } from 'astro:content';
import { Image } from '@unpic/astro';
import { marked } from 'marked';
import Layout from '../../layouts/default.astro';
import { createImageUrl } from '../../util/cloudinary';
import Card from '../../components/cards/card.astro';
import { getEntry } from 'astro:content';

export const prerender = true;

export async function getStaticPaths() {
	const users = await getCollection('profiles');

	return users.map((user) => {
		return {
			params: {
				username: user.id,
			},
		};
	});
}

const { username } = Astro.params;
const profile = await getEntry('profiles', username);
const user = profile?.data;

if (!user) {
	throw new Error('no user found');
}

const imgUrl = user.photo?.public_id
	? createImageUrl(user.photo.public_id, {
			width: 800,
			aspect_ratio: 1,
			crop: 'thumb',
			gravity: 'face',
		})
	: 'https://res.cloudinary.com/jlengstorf/image/upload/f_auto/q_auto/w_150/v1732599682/lwj/v2/lwj-heart.png';

const subscription = user.subscription ?? {
	status: 'inactive',
	level: 'none',
};
const isSubscriber = !['jlengstorf', 'jlengstorf-test'].includes(
	user.slug ?? '',
)
	? subscription?.status === 'active'
	: false;

const bio = marked.parse(user.bio ?? '');
---

<Layout title={`${user.name}â€™s profile on CodeTV`}>
	<main class="wrapper">
		<div class="profile-photo">
			<Image
				src={imgUrl}
				alt={user.name}
				priority={true}
				width={800}
				height={800}
			/>

			<h1>
				{user.name} (@{username})
			</h1>
			{isSubscriber ? <p class="level">{subscription.level}</p> : null}
		</div>
		<div class="details">
			{
				user.links && user.links?.length > 0 ? (
					<nav class="links">
						<span>Links:</span>
						{user.links.map((link) => (
							<a href={link.url}>{link.label}</a>
						))}
					</nav>
				) : null
			}

			<div class="bio" set:html={bio} />

			{
				user.episodes.length > 0 ? (
					<section class="related-episodes">
						<h2>Episodes featuring {user.name}</h2>

						<div class="row three-up">
							{user.episodes.map((related) => {
								const epIndex =
									related.collection?.episodeSlugs?.findIndex(
										(slug) => slug === related.slug,
									) ?? 0;
								const epNumber = epIndex + 1;

								return (
									<Card
										image={{
											public_id: related.thumbnail?.public_id,
											alt: related.thumbnail?.alt ?? '',
										}}
										title={related.title}
										description={related.short_description}
										link={`/series/${related.series?.slug}/${related.collection?.slug}/${related.slug}`}
										linkText="Watch episode"
										youtube_id={related.video?.youtube_id}
									>
										<Fragment slot="tagline">
											<p class="series">{related.series?.title}</p>
											<p class="episode-number">
												{`${related.collection?.slug}E${epNumber}`.toUpperCase()}
											</p>
										</Fragment>
									</Card>
								);
							})}
						</div>
					</section>
				) : null
			}
		</div>
	</main>
</Layout>

<style>
	.wrapper {
		padding: 40px 5cqw 60px;

		@media (min-width: 750px) {
			display: grid;
			gap: 40px;
			grid-template-columns: 320px auto;
		}
	}

	.profile-photo {
		block-size: auto;
		inline-size: 100%;

		img {
			border-radius: 2px;
			display: block;
			inline-size: 100%;
		}

		h1 {
			margin-block: 20px;
		}
	}

	.links {
		align-items: center;
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
		justify-conent: end;
		margin-block-start: 1rem;
	}

	.bio {
		margin-block: 40px;
		max-inline-size: 54ch;

		p {
			font-size: 1.25em;

			+ p {
				margin-block-start: 12px;
			}
		}
	}

	h2 {
		font-size: 1.25em;
		font-weight: 400;
		line-height: 1.1;
		margin-block: 64px 20px;
	}

	.level {
		background: color-mix(in oklch, var(--orange) 15%, transparent);
		border: 0.5px solid var(--orange);
		border-radius: 3px;
		color: color-mix(in oklch, var(--orange) 40%, var(--white));
		font-size: 0.75em;
		inline-size: max-content;
		padding-inline: 4px;
	}

	.row {
		padding-inline: 0;
	}
</style>
