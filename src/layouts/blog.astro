---
import Newsletter from '../components/home/newsletter.astro';
import { generateDefaultImage } from '../util/cloudinary';
import Layout from './default.astro';

const { frontmatter, headings } = Astro.props;
const url = Astro.url.toString();

const { title, description } = frontmatter;

const og: { title: string; description: string; image?: string } = {
	title: frontmatter.share?.title ?? title,
	description: frontmatter.share?.text ?? description,
};

og.image = frontmatter.share?.image ?? generateDefaultImage({ text: og.title });
---

<Layout title={title} description={og.description}>
	<Fragment slot="head">
		<link rel="canonical" href={url.toString()} />

		<meta name="description" content={og.description} />
		<meta name="image" content={og.image} />

		<meta property="og:type" content="video.episode" />
		<meta property="og:title" content={og.title} />
		<meta property="og:site_name" content="CodeTV" />
		<meta property="og:description" content={og.description} />
		<meta property="og:url" content={Astro.url} />

		<meta property="og:image" content={og.image} />
		<meta property="og:image:width" content="1600" />
		<meta property="og:image:height" content="900" />
		<meta property="og:image:alt" content={og.title} />

		<meta name="twitter:dnt" content="on" />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:description" content={og.description} />
		<meta name="twitter:image" content={og.image} />
		<meta name="twitter:creator" content="@codetv_dev" />

		<script
			type="application/ld+json"
			set:html={`
				{
					"@context": "https://schema.org",
					"@type": "NewsArticle",
					"headline": "${og.title}",
					"description": "${og.description}",
					"image": [
						"${og.image}",
					],
					"datePublished": "2024-01-05T08:00:00+08:00",
					"dateModified": "2024-02-05T09:20:00+08:00",
					"author": [{
						"@type": "Person",
						"name": "Jason Lengstorf",
						"url": "https://codetv.dev/profile/jlengstorf"
					}]
				}
			`}
		/>

		<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"
		></script>
	</Fragment>

	<main>
		<div class="post-container">
			<article class="post">
				<header>
					<h1>{title}</h1>
					<p>{description}</p>
				</header>

				<div class="post-content" data-section="post-content"><slot /></div>

				<aside class="table-of-contents" data-section="table-of-contents">
					<div class="toc-sticky-container">
						<h2
							class="gradient-subheading gradient-underline"
							id="table-of-contents"
						>
							Table of Contents
						</h2>
						<ol class="gradient-underline">
							{
								headings.map(
									(heading: { depth: number; slug: string; text: string }) => {
										if (heading.depth > 2) {
											return null;
										}

										return (
											<li>
												<a href={`#${heading.slug}`}>{heading.text}</a>
											</li>
										);
									},
								)
							}
						</ol>
						<p class="sidebar-links">
							<a href="/newsletter">get updates</a>
							<a href="/blog/rss.xml">blog RSS</a>
						</p>
					</div>
				</aside>
			</article>
		</div>

		{frontmatter.showOptin !== false ? <Newsletter /> : null}
	</main>
</Layout>

<script>
	function setActiveHeading() {
		const headingElements = document.querySelectorAll(
			'[data-section=post-content] h2',
		);

		const observerCallback: IntersectionObserverCallback = ([entry]) => {
			const activeHeading = entry.target;
			const links = Array.from(
				document.querySelectorAll('[data-section=table-of-contents] a'),
			);

			links.forEach((link) => {
				const [, href] = link.getAttribute('href')?.split('#') ?? '';

				if (entry.isIntersecting && href === activeHeading.id) {
					links.forEach((l) => l.classList.remove('active'));
					link.classList.add('active');
				}
			});
		};

		const observer = new IntersectionObserver(observerCallback, {
			threshold: [0.9],
		});

		Array.from(headingElements)
			.filter((h2) => h2.id !== 'table-of-contents')
			.map((h2) => {
				observer.observe(h2);

				return {
					label: h2.textContent,
					href: `#${h2.id}`,
				};
			});

		return () => {
			Array.from(headingElements).map((h2) => {
				observer.unobserve(h2);
			});
		};
	}

	setActiveHeading();
</script>

<style>
	.post-container {
		inline-size: min(var(--max-width), 90%);
		margin: 200px auto;
	}

	h1 {
		line-height: 1.1;
	}

	.post {
		padding: 0 5vw;
	}

	.post header,
	.post .post-content {
		grid-column-start: 1;
	}

	.post header p {
		font-size: 1.25em;
		margin-block-start: 1.25rem;
	}

	.post-content {
		margin-inline: 0;
		max-inline-size: 100%;
	}

	.post .table-of-contents {
		display: none;
		grid-column-start: 2;
		grid-row-start: 2;
	}

	@media (min-width: 1000px) {
		.post {
			display: grid;
			gap: 30px 50px;
			grid-template-columns: 60ch 200px;
			justify-content: center;
			padding: 0;
		}

		.post-content {
			align-self: start;
			max-width: 60ch;
		}

		.post .table-of-contents {
			display: block;
		}
	}

	.table-of-contents {
		font-size: 0.8rem;

		.toc-sticky-container {
			position: sticky;
			top: 150px;
		}

		h2 {
			margin: 0 -5px;
			padding: 0 5px;
		}

		ol {
			list-style: none;
			padding: 0;
			margin: 0.5rem 0 0;
		}

		li {
			margin: 0;
		}

		a {
			border-left: 2px solid transparent;
			color: var(--text-muted);
			display: block;
			line-height: 1.4;
			margin: 0 -5px;
			padding: 10px 5px;
			text-decoration: none;

			&.active {
				background: color-mix(in oklch, var(--orange) 15%, transparent);
				border-color: var(--orange);
				color: var(--white);
			}
		}
	}

	.sidebar-links {
		color: var(--purple-600);
		display: flex;
		font-size: 0.8em;
		gap: 10px;
		letter-spacing: 0.1em;
		text-transform: uppercase;

		a {
			color: inherit;
			margin-block: 0;

			&:hover,
			&:focus {
				text-decoration: underline;
			}
		}
	}
</style>

<style is:global>
	.post-content {
		h2 {
			scroll-padding-top: 30px;

			&:not(:first-child) {
				margin-block-start: 40px;
			}
		}

		h3 {
			&:not(:first-child) {
				margin-block-start: 32px;
			}
		}

		p:not(:first-child),
		ul,
		ol {
			margin-block-start: 20px;
		}

		li {
			margin-block-start: 8px;
		}

		strong {
			color: var(--text-strong);
			font-weight: 600;
		}

		a {
			color: var(--text-link);
			font-weight: inherit;

			strong {
				color: inherit;
			}
		}

		pre {
			color: var(--white);
			background: var(--black);
			font-size: 0.8em;
			margin: 2rem -5vw;
			padding: 15px calc(5vw + 5px);

			@media (min-width: 1000px) {
				border-radius: 2.5px;
				margin-inline: -15px;
				padding: 20px;
			}
		}
	}

	code {
		font-family:
			'monaspace-argon', 'Operator Mono', Consolas, Monaco, 'Andale Mono',
			'Ubuntu Mono', monospace;
	}

	.post-figure {
		margin: 2rem max(-5vw, -30px);

		img {
			border-radius: 5px 5px 0 0;
			display: block;
			width: 100%;
		}

		&:not(:has(figcaption)) img {
			border-radius: 5px;
		}

		> * {
			display: block;
		}

		p {
			margin: 0;
		}

		figcaption {
			background: color-mix(in oklch, var(--black) 70%, transparent);
			border-radius: 0 0 5px 5px;
			color: var(--white);
			font-size: 0.8em;
			font-style: italic;
			margin: 0;
			padding: 5px min(5vw, 30px);

			a {
				color: inherit;
			}
		}

		blockquote + figcaption {
			background: transparent;
			color: var(--text-muted);
		}
	}

	.post-content :not(pre) > code {
		background: var(--gray-100);
		border: 1px solid color-mix(in oklch, var(--text-muted) 10%, var(--gray-100));
		border-radius: 2px;
		font-size: 0.9em;
		line-height: 1;
		overflow-x: scroll;
		padding: 2px 4px;
		word-wrap: break-word;
	}

	blockquote {
		border-inline-start: 0.5rem var(--text-muted) solid;
		color: var(--text-strong);
		font-size: 1.125rem;
		font-style: italic;
		font-weight: 400;
		margin-block: 0;
		margin-inline-start: 0;
		padding-inline-start: 25px;
		text-indent: -0.45rem; /* a lil magic number action */

		@supports (hanging-punctuation: first;) {
			hanging-punctuation: first;
			text-indent: 0;
		}
	}

	.expressive-code {
		margin-block-start: 1.25rem;

		+ :is(h2, h3) {
			padding-block-start: 1.5rem;
		}
	}
</style>
