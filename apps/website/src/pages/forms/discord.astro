---
import { SignedIn, SignedOut, SignIn } from '@clerk/astro/components';
import Layout from '../../layouts/default.astro';

const url = Astro.url;
url.pathname = '/forms/web-dev-challenge';

const user = await Astro.locals.currentUser();

const discordAcct = user?.externalAccounts.find(
	(acct) => acct.provider === 'oauth_discord',
);
---

<Layout title="Web Dev Challenge Filming Questionnaire">
	<main>
		<SignedIn>
			<section class="wrapper">
        {discordAcct ? (
          <h2>Your Discord account has been connected!</h2>

          <pre>{JSON.stringify(discordAcct, null, 2)}</pre>

					<button type="button" class="button" id="assign-discord-role">
						Do the Thing
					</button>
        ) : (
          <h2>Join the CodeTV Discord</h2>

          <p>
            Your response has been saved. You can update your bio, profile photo,
            and links at any time on <a href="/dashboard">your dashboard</a>.
          </p>

          <button type="button" class="button" id="add-discord">
            Connect Your Discord Account
          </button>
        )}
			</section>
		</SignedIn>

		<SignedOut>
			<SignIn forceRedirectUrl={url.toString()} />
		</SignedOut>
	</main>
</Layout>

<script>
	import { PUBLIC_CLERK_PUBLISHABLE_KEY } from 'astro:env/client';
	import { Clerk } from '@clerk/clerk-js';
import { actions } from 'astro:actions';

	const clerk = new Clerk(PUBLIC_CLERK_PUBLISHABLE_KEY);
	await clerk.load();

  document.getElementById('add-discord')?.addEventListener('click', () => {
		clerk.user
			?.createExternalAccount({
				strategy: 'oauth_discord',
				redirectUrl: '/forms/discord',
			})
			.then((externalAccount) => {
				window.location.href =
					externalAccount.verification?.externalVerificationRedirectURL?.toString() ??
					'';
			})
			.catch((error) => {
				console.log('An error occurred:', error.errors);
			});
	});

	document.getElementById('assign-discord-role')?.addEventListener('click', async () => {
		const result = await actions.user.addToDiscord();

		console.log({ result });
	});
</script>

<style>
	main {
		background: var(--black);
		padding: 40px 5cqw 60px;
	}

	.wrapper {
		margin-inline: auto;
		max-inline-size: 54ch;

		@media (min-width: 750px) {
			padding-block-start: 120px;
		}
	}
</style>
