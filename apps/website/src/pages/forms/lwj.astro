---
import { SignedIn, SignedOut, SignIn } from '@clerk/astro/components';
import Layout from '../../layouts/default.astro';

const url = Astro.url;
url.pathname = '/forms/lwj';
---

<Layout title="Web Dev Challenge Filming Questionnaire">
	<main>
		<SignedIn>
			<section class="wrapper">
        <h2>Join Learn With Jason</h2>

        <ul id="available-dates"></ul>

        <button type="button" class="button" id="get-dates">
          Find Available Dates
        </button>
			</section>
		</SignedIn>

		<SignedOut>
			<SignIn forceRedirectUrl={url.toString()} />
		</SignedOut>
	</main>
</Layout>

<script>
	import { actions } from "astro:actions";

	function updateUI(dates: string[]) {
		const list = document.getElementById('available-dates');

		if (!list) {
			return;
		}

		dates.forEach((date) => {
			const li = document.createElement('li');
			li.textContent = date;

			list.appendChild(li);
		})
	}

	const btn = document.getElementById('get-dates');
	
	btn?.addEventListener('click', async () => {
		const {data: ids, error} = await actions.forms.lwj();

		if (error) {
			console.error(error);
			return;
		}

		if (!ids || !ids) {
			console.error('Error updating the role');
			return;
		}

		btn.textContent = 'Loading...';
		btn.setAttribute('disabled', 'disabled');

		const interval = setInterval(async () => {
			const res = await fetch(`/api/inngest/run/${ids[0]}`);

			if (!res.ok) {
				console.error(res.statusText);
				return;
			}

			const data = await res.json();

			console.log(data);

			if (data.at(0).status === 'Completed') {
				clearInterval(interval);

				updateUI(data.at(0).output);
			}
		}, 4000);
	});
</script>

<script>
  // import { subscribe } from "@inngest/realtime";
  
  // const token = await fetch("/api/get-token", {
  //   method: "POST",
  //   credentials: "include",
  // }).then(res => res.json());

	// const stream = await subscribe(token);

  // // const stream = await subscribe({
  // //   channel: typeOnlyChannel('test'),
  // //   topics: ["messages"],
  // // });

	// const log = document.getElementById('streaming-output');

  // for await (const message of stream) {
  //   console.log(message);

	// 	if (!log) {
	// 		continue;
	// 	}

	// 	log.textContent += `\n${JSON.stringify(message, null, 2)}`;
  // }
</script>

<style>
	main {
		background: var(--black);
		padding: 40px 5cqw 60px;
	}

	.wrapper {
		margin-inline: auto;
		max-inline-size: 54ch;

		@media (min-width: 750px) {
			padding-block-start: 120px;
		}

		p {
			margin-block-start: 16px;
		}
	}
</style>
